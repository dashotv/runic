// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"time"

	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
	"github.com/dashotv/runic/newznab"
	"github.com/dashotv/runic/parser"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log     *zap.SugaredLogger
	Indexer *grimoire.Store[*Indexer]
	Minion  *grimoire.Store[*Minion]
	Release *grimoire.Store[*Release]
}

func NewConnector(app *Application) (*Connector, error) {
	var s *Connection
	var err error

	s, err = app.Config.ConnectionFor("indexer")
	if err != nil {
		return nil, err
	}
	indexer, err := grimoire.New[*Indexer](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("minion")
	if err != nil {
		return nil, err
	}
	minion, err := grimoire.New[*Minion](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("release")
	if err != nil {
		return nil, err
	}
	release, err := grimoire.New[*Release](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	c := &Connector{
		Log:     app.Log.Named("db"),
		Indexer: indexer,
		Minion:  minion,
		Release: release,
	}

	return c, nil
}

type Indexer struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name        string           `bson:"name" json:"name"`
	Url         string           `bson:"url" json:"url"`
	Active      bool             `bson:"active" json:"active"`
	Categories  map[string][]int `bson:"categories" json:"categories"`
	ProcessedAt time.Time        `bson:"processed_at" json:"processed_at"`
}

type Minion struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Kind     string           `bson:"kind" json:"kind"`
	Args     string           `bson:"args" json:"args"`
	Status   string           `bson:"status" json:"status"`
	Queue    string           `bson:"queue" json:"queue"`
	Attempts []*MinionAttempt `bson:"attempts" json:"attempts"`
}

type MinionAttempt struct { // struct
	StartedAt  time.Time `bson:"started_at" json:"started_at"`
	Duration   float64   `bson:"duration" json:"duration"`
	Status     string    `bson:"status" json:"status"`
	Error      string    `bson:"error" json:"error"`
	Stacktrace []string  `bson:"stacktrace" json:"stacktrace"`
}

type Release struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type        string              `bson:"type" json:"type"`
	Source      string              `bson:"source" json:"source"`
	Title       string              `bson:"title" json:"title"`
	Year        int                 `bson:"year" json:"year"`
	Description string              `bson:"description" json:"description"`
	Size        int64               `bson:"size" json:"size"`
	View        string              `bson:"view" json:"view"`
	Download    string              `bson:"download" json:"download"`
	Infohash    string              `bson:"infohash" json:"infohash"`
	Season      int                 `bson:"season" json:"season"`
	Episode     int                 `bson:"episode" json:"episode"`
	Volume      int                 `bson:"volume" json:"volume"`
	Group       string              `bson:"group" json:"group"`
	Website     string              `bson:"website" json:"website"`
	Verified    bool                `bson:"verified" json:"verified"`
	Widescreen  bool                `bson:"widescreen" json:"widescreen"`
	Unrated     bool                `bson:"unrated" json:"unrated"`
	Uncensored  bool                `bson:"uncensored" json:"uncensored"`
	Bluray      bool                `bson:"bluray" json:"bluray"`
	ThreeD      bool                `bson:"threeD" json:"threeD"`
	Resolution  string              `bson:"resolution" json:"resolution"`
	Encodings   []string            `bson:"encodings" json:"encodings"`
	Quality     string              `bson:"quality" json:"quality"`
	Raw         *newznab.NZB        `bson:"raw" json:"raw"`
	Info        *parser.TorrentInfo `bson:"info" json:"info"`
	Downloader  string              `bson:"downloader" json:"downloader"`
	PublishedAt time.Time           `bson:"published_at" json:"published_at"`
}
