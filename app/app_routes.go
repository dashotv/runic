// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"net/http"
	"time"

	ginzap "github.com/gin-contrib/zap"
	"github.com/gin-gonic/gin"
)

func init() {
	initializers = append(initializers, setupRoutes)
	healthchecks["routes"] = checkRoutes
}

func checkRoutes(app *Application) error {
	// TODO: check routes
	return nil
}

func setupRoutes(app *Application) error {
	if app.Config.Mode == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

	logger := app.Log.Named("routes").Desugar()

	app.Engine = gin.New()
	app.Engine.Use(
		ginzap.Ginzap(logger, time.RFC3339, true),
		ginzap.RecoveryWithZap(logger, true),
	)
	// unauthenticated routes
	app.Default = app.Engine.Group("/")
	// authenticated routes (if enabled, otherwise same as default)
	app.Router = app.Engine.Group("/")

	// if app.Config.Auth {
	// 	clerkSecret := app.Config.ClerkSecretKey
	// 	if clerkSecret == "" {
	// 		app.Log.Fatal("CLERK_SECRET_KEY is not set")
	// 	}
	//
	// 	clerkClient, err := clerk.NewClient(clerkSecret)
	// 	if err != nil {
	// 		app.Log.Fatalf("clerk: %s", err)
	// 	}
	//
	// 	app.Router.Use(requireSession(clerkClient))
	// }

	return nil
}

// Enable Auth and uncomment to use Clerk to manage auth
// also add this import: "github.com/clerkinc/clerk-sdk-go/clerk"
//
// requireSession wraps the clerk.RequireSession middleware
// func requireSession(client clerk.Client) gin.HandlerFunc {
// 	requireActiveSession := clerk.RequireSessionV2(client)
// 	return func(gctx *gin.Context) {
// 		var skip = true
// 		var handler http.HandlerFunc = func(http.ResponseWriter, *http.Request) {
// 			skip = false
// 		}
// 		requireActiveSession(handler).ServeHTTP(gctx.Writer, gctx.Request)
// 		switch {
// 		case skip:
// 			gctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "session required"})
// 		default:
// 			gctx.Next()
// 		}
// 	}
// }

func (a *Application) Routes() {
	a.Default.GET("/", a.indexHandler)
	a.Default.GET("/health", a.healthHandler)

	indexers := a.Router.Group("/indexers")
	indexers.GET("/", a.IndexersIndexHandler)
	indexers.POST("/", a.IndexersCreateHandler)
	indexers.GET("/:id", a.IndexersShowHandler)
	indexers.PUT("/:id", a.IndexersUpdateHandler)
	indexers.PATCH("/:id", a.IndexersSettingsHandler)
	indexers.DELETE("/:id", a.IndexersDeleteHandler)

	sources := a.Router.Group("/sources")
	sources.GET("/", a.SourcesIndexHandler)
	sources.POST("/", a.SourcesCreateHandler)
	sources.GET("/:id", a.SourcesShowHandler)
	sources.PUT("/:id", a.SourcesUpdateHandler)
	sources.PATCH("/:id", a.SourcesSettingsHandler)
	sources.DELETE("/:id", a.SourcesDeleteHandler)
	sources.GET("/:id/read", a.SourcesReadHandler)
	sources.GET("/:id/search", a.SourcesSearchHandler)
	sources.GET("/:id/parse", a.SourcesParseHandler)

}

func (a *Application) indexHandler(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"name": "runic",
		"routes": gin.H{
			"indexers": "/indexers",
			"sources":  "/sources",
		},
	})
}

func (a *Application) healthHandler(c *gin.Context) {
	health, err := a.Health()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	c.JSON(http.StatusOK, gin.H{"name": "runic", "health": health})
}

// Indexers (/indexers)
func (a *Application) IndexersIndexHandler(c *gin.Context) {
	page := QueryInt(c, "page")
	limit := QueryInt(c, "limit")
	a.IndexersIndex(c, page, limit)
}
func (a *Application) IndexersCreateHandler(c *gin.Context) {
	a.IndexersCreate(c)
}
func (a *Application) IndexersShowHandler(c *gin.Context) {
	id := c.Param("id")
	a.IndexersShow(c, id)
}
func (a *Application) IndexersUpdateHandler(c *gin.Context) {
	id := c.Param("id")
	a.IndexersUpdate(c, id)
}
func (a *Application) IndexersSettingsHandler(c *gin.Context) {
	id := c.Param("id")
	a.IndexersSettings(c, id)
}
func (a *Application) IndexersDeleteHandler(c *gin.Context) {
	id := c.Param("id")
	a.IndexersDelete(c, id)
}

// Sources (/sources)
func (a *Application) SourcesIndexHandler(c *gin.Context) {
	page := QueryInt(c, "page")
	limit := QueryInt(c, "limit")
	a.SourcesIndex(c, page, limit)
}
func (a *Application) SourcesCreateHandler(c *gin.Context) {
	a.SourcesCreate(c)
}
func (a *Application) SourcesShowHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesShow(c, id)
}
func (a *Application) SourcesUpdateHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesUpdate(c, id)
}
func (a *Application) SourcesSettingsHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesSettings(c, id)
}
func (a *Application) SourcesDeleteHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesDelete(c, id)
}
func (a *Application) SourcesReadHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesRead(c, id)
}
func (a *Application) SourcesSearchHandler(c *gin.Context) {
	id := c.Param("id")
	q := QueryString(c, "q")
	t := QueryString(c, "t")
	a.SourcesSearch(c, id, q, t)
}
func (a *Application) SourcesParseHandler(c *gin.Context) {
	id := c.Param("id")
	a.SourcesParse(c, id)
}
