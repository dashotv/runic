// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
	"github.com/dashotv/runic/newznab"
	"github.com/dashotv/runic/reader"
)

type SourcesService struct {
	client *Client
}

// NewSources makes a new client for accessing Sources services.
func NewSourcesService(client *Client) *SourcesService {
	return &SourcesService{
		client: client,
	}
}

type SourcesIndexRequest struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type SourcesIndexResponse struct {
	*Response
	Result []*reader.Source `json:"result"`
	Total  int64            `json:"total"`
}

func (s *SourcesService) Index(ctx context.Context, req *SourcesIndexRequest) (*SourcesIndexResponse, error) {
	result := &SourcesIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("page", fmt.Sprintf("%v", req.Page)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		Get("/sources/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type SourcesShowRequest struct {
	Id string `json:"id"`
}

type SourcesShowResponse struct {
	*Response
	Result reader.Source `json:"result"`
}

func (s *SourcesService) Show(ctx context.Context, req *SourcesShowRequest) (*SourcesShowResponse, error) {
	result := &SourcesShowResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Get("/sources/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type SourcesReadRequest struct {
	Id         string `json:"id"`
	Categories string `json:"categories"`
}

type SourcesReadResponse struct {
	*Response
	Result []*newznab.NZB `json:"result"`
}

func (s *SourcesService) Read(ctx context.Context, req *SourcesReadRequest) (*SourcesReadResponse, error) {
	result := &SourcesReadResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("categories", fmt.Sprintf("%v", req.Categories)).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Get("/sources/{id}/read")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type SourcesSearchRequest struct {
	Id string `json:"id"`
	Q  string `json:"q"`
	T  string `json:"t"`
}

type SourcesSearchResponse struct {
	*Response
	Result []*newznab.NZB `json:"result"`
}

func (s *SourcesService) Search(ctx context.Context, req *SourcesSearchRequest) (*SourcesSearchResponse, error) {
	result := &SourcesSearchResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("q", fmt.Sprintf("%v", req.Q)).
		SetQueryParam("t", fmt.Sprintf("%v", req.T)).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Get("/sources/{id}/search")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type SourcesParseRequest struct {
	Id         string `json:"id"`
	Categories string `json:"categories"`
}

type SourcesParseResponse struct {
	*Response
	Result []*Release `json:"result"`
}

func (s *SourcesService) Parse(ctx context.Context, req *SourcesParseRequest) (*SourcesParseResponse, error) {
	result := &SourcesParseResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("categories", fmt.Sprintf("%v", req.Categories)).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Get("/sources/{id}/parse")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
