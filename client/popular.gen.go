// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type PopularService struct {
	client *Client
}

// NewPopular makes a new client for accessing Popular services.
func NewPopularService(client *Client) *PopularService {
	return &PopularService{
		client: client,
	}
}

type PopularMoviesResponse struct {
	*Response
	Result []*PopularMovie `json:"result"`
}

func (s *PopularService) Movies(ctx context.Context) (*PopularMoviesResponse, error) {
	result := &PopularMoviesResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/popular/movies")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type PopularIndexRequest struct {
	Interval string `json:"interval"`
}

type PopularIndexResponse struct {
	*Response
	Result *PopularResponse `json:"result"`
	Total  int64            `json:"total"`
}

func (s *PopularService) Index(ctx context.Context, req *PopularIndexRequest) (*PopularIndexResponse, error) {
	result := &PopularIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("interval", fmt.Sprintf("%v", req.Interval)).
		Get("/popular/{interval}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
