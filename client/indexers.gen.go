// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type IndexersService struct {
	client *Client
}

// NewIndexers makes a new client for accessing Indexers services.
func NewIndexersService(client *Client) *IndexersService {
	return &IndexersService{
		client: client,
	}
}

type IndexersIndexRequest struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type IndexersIndexResponse struct {
	*Response
	Result []*Indexer `json:"result"`
	Total  int64      `json:"total"`
}

func (s *IndexersService) Index(ctx context.Context, req *IndexersIndexRequest) (*IndexersIndexResponse, error) {
	result := &IndexersIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("page", fmt.Sprintf("%v", req.Page)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		Get("/indexers/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type IndexersCreateRequest struct {
	Subject *Indexer `json:"subject"`
}

type IndexersCreateResponse struct {
	*Response
	Result *Indexer `json:"result"`
}

func (s *IndexersService) Create(ctx context.Context, req *IndexersCreateRequest) (*IndexersCreateResponse, error) {
	result := &IndexersCreateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		Post("/indexers/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type IndexersShowRequest struct {
	ID string `json:"id"`
}

type IndexersShowResponse struct {
	*Response
	Result *Indexer `json:"result"`
}

func (s *IndexersService) Show(ctx context.Context, req *IndexersShowRequest) (*IndexersShowResponse, error) {
	result := &IndexersShowResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/indexers/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type IndexersUpdateRequest struct {
	ID      string   `json:"id"`
	Subject *Indexer `json:"subject"`
}

type IndexersUpdateResponse struct {
	*Response
	Result *Indexer `json:"result"`
}

func (s *IndexersService) Update(ctx context.Context, req *IndexersUpdateRequest) (*IndexersUpdateResponse, error) {
	result := &IndexersUpdateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Put("/indexers/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type IndexersSettingsRequest struct {
	ID      string   `json:"id"`
	Setting *Setting `json:"setting"`
}

type IndexersSettingsResponse struct {
	*Response
	Result *Indexer `json:"result"`
}

func (s *IndexersService) Settings(ctx context.Context, req *IndexersSettingsRequest) (*IndexersSettingsResponse, error) {
	result := &IndexersSettingsResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Patch("/indexers/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type IndexersDeleteRequest struct {
	ID string `json:"id"`
}

type IndexersDeleteResponse struct {
	*Response
	Result *Indexer `json:"result"`
}

func (s *IndexersService) Delete(ctx context.Context, req *IndexersDeleteRequest) (*IndexersDeleteResponse, error) {
	result := &IndexersDeleteResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Delete("/indexers/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
